"use strict";angular.module("owsWalletPlugin",["gettext","ionic","ngLodash","owsWalletPluginClient","owsWalletPlugin.api","owsWalletPlugin.controllers","owsWalletPlugin.services"]),angular.module("owsWalletPlugin.api",[]),angular.module("owsWalletPlugin.controllers",[]),angular.module("owsWalletPlugin.services",[]),angular.module("owsWalletPlugin").config(function($stateProvider){$stateProvider.state("home",{url:"/home/:code",controller:"HomeCtrl",controllerAs:"coinbase",templateUrl:"views/home/home.html"}).state("settings",{url:"/settings",controller:"SettingsCtrl",templateUrl:"views/settings/settings.html"}).state("buy",{url:"/buy/:amount/:currency",controller:"BuyCtrl",templateUrl:"views/buy/buy.html"}).state("sell",{url:"/sell/:amount/:currency",controller:"SellCtrl",templateUrl:"views/sell/sell.html"})}).run(function($rootScope,$state,$log,Coinbase){owswallet.Plugin.ready(function(){owswallet.Plugin.openForBusiness(Coinbase.pluginId,function(){$state.go("home")})}),$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){$log.debug("Applet route change start from:",fromState.name||"-"," to:",toState.name)})}),angular.module("owsWalletPlugin").run(["gettextCatalog",function(gettextCatalog){}]),angular.module("owsWalletPlugin.services").service("coinbaseService",function($rootScope,$log,lodash,Account,Coinbase){var account,priceInfo,urls,root={},coinbase=new Coinbase("service");return coinbase.init().then(function(accountId){return void 0!=accountId&&(account=new Account(accountId)),coinbase.getPriceInfo()}).then(function(pi){return priceInfo=pi,coinbase.getUrls()}).then(function(u){urls=u}).catch(function(error){$log.error("Could not initialize Coinbase service: "+error)}),root.accessApi=function(){coinbase.accessApi(oauthCode)},root.getStoredToken=function(){},root.init=function(){},root.logout=function(){coinbase.logout()},root.getAvailableCurrencies=function(){return coinbase.getAvailableCurrencies()},root.buyPrice=function(){return coinbase.buyPrice(currency)},root.sellPrice=function(){return coinbase.sellPrice(currency)},root.getPendingTransactions=function(){return coinbase.getPendingTransactions()},root.getSignupUrl=function(){return urls.signupUrl},root.getSupportUrl=function(){return urls.supportUrl},root.getOauthCodeUrl=function(){return urls.oauthCodeUrl},root.savePendingTransaction=function(){return coinbase.savePendingTransaction(tx,options)},root.getPaymentMethods=function(){return coinbase.getPaymentMethods()},root.getNetwork=function(){},root.buyRequest=function(){return account.buyRequest(data)},root.getTransaction=function(){return account.getTransaction(txId)},root.getBuyOrder=function(){return account.getBuyOrder(buyId)},root.checkEnoughFundsForFee=function(){},root.getErrorsAsString=function(){},root.priceSensitivity=function(){return priceInfo.priceSensitivity.values},root.selectedPriceSensitivity=function(){return priceInfo.priceSensitivity.selected},root.sellRequest=function(){return account.sellRequest(data)},root.createAddress=function(){return account.createAddress(data)},root.getAccount=function(){return coinbase.getAccount(accountId)},root.getCurrentUser=function(){return coinbase.getCurrentUser()},root}),angular.module("owsWalletPlugin.controllers").controller("BuyCtrl",function($scope,$log,$state,$timeout,$ionicHistory,$ionicScrollDelegate,$ionicConfig,lodash,coinbaseService,popupService,profileService,ongoingProcess,walletService,txFormatService,externalLinkService){var amount,currency,showErrorAndBack=function(err){$scope.sendStatus="",$log.error(err),err=err.errors?err.errors[0].message:err,popupService.showAlert("Error",err,function(){$ionicHistory.goBack()})},showError=function(err){$scope.sendStatus="",$log.error(err),err=err.errors?err.errors[0].message:err,popupService.showAlert("Error",err)},statusChangeHandler=function(processName,showName,isOn){$log.debug("statusChangeHandler: ",processName,showName,isOn),"buyingBitcoin"!=processName||isOn?showName&&($scope.sendStatus=showName):($scope.sendStatus="success",$timeout(function(){$scope.$digest()},100))},processPaymentInfo=function(){ongoingProcess.set("connectingCoinbase",!0),coinbaseService.init(function(err,res){if(err)return ongoingProcess.set("connectingCoinbase",!1),void showErrorAndBack(err);coinbaseService.buyPrice(coinbaseService.getAvailableCurrency(),function(err,b){$scope.buyPrice=b.data||null}),$scope.paymentMethods=[],$scope.selectedPaymentMethodId={value:null},coinbaseService.getPaymentMethods(function(err,p){if(err)return ongoingProcess.set("connectingCoinbase",!1),void showErrorAndBack(err);for(var hasPrimary,pm,i=0;i<p.data.length;i++)pm=p.data[i],pm.allow_buy&&$scope.paymentMethods.push(pm),pm.allow_buy&&pm.primary_buy&&(hasPrimary=!0,$scope.selectedPaymentMethodId.value=pm.id);if(lodash.isEmpty($scope.paymentMethods)){ongoingProcess.set("connectingCoinbase",!1);return void externalLinkService.open("https://support.coinbase.com/customer/portal/articles/1148716-payment-methods-for-us-customers",!0,null,"No payment method available to buy","More info","Go Back",function(){$ionicHistory.goBack(-2)})}hasPrimary||($scope.selectedPaymentMethodId.value=$scope.paymentMethods[0].id),$scope.buyRequest()})})};$scope.$on("$ionicView.beforeLeave",function(event,data){$ionicConfig.views.swipeBackEnabled(!0)}),$scope.$on("$ionicView.enter",function(event,data){$ionicConfig.views.swipeBackEnabled(!1)}),$scope.$on("$ionicView.beforeEnter",function(event,data){if($scope.isFiat="BTC"!=data.stateParams.currency,amount=data.stateParams.amount,currency=data.stateParams.currency,$scope.network=coinbaseService.getNetwork(),$scope.wallets=profileService.getWallets({onlyComplete:!0,network:$scope.network,coin:"btc"}),lodash.isEmpty($scope.wallets))return void showErrorAndBack("No wallets available");$scope.onWalletSelect($scope.wallets[0])}),$scope.buyRequest=function(){ongoingProcess.set("connectingCoinbase",!0),coinbaseService.init(function(err,res){if(err)return ongoingProcess.set("connectingCoinbase",!1),void showErrorAndBack(err);var accountId=res.accountId,dataSrc={amount:amount,currency:currency,payment_method:$scope.selectedPaymentMethodId.value,quote:!0};coinbaseService.buyRequest(accountId,dataSrc,function(err,data){if(ongoingProcess.set("connectingCoinbase",!1),err)return void showErrorAndBack(err);$scope.buyRequestInfo=data.data,$timeout(function(){$scope.$apply()},100)})})},$scope.buyConfirm=function(){var message="Buy bitcoin for "+$scope.amountUnitStr;popupService.showConfirm(null,message,"Confirm","Cancel",function(ok){ok&&(ongoingProcess.set("buyingBitcoin",!0,statusChangeHandler),coinbaseService.init(function(err,res){if(err)return ongoingProcess.set("buyingBitcoin",!1,statusChangeHandler),void showError(err);var accountId=res.accountId,dataSrc={amount:amount,currency:currency,payment_method:$scope.selectedPaymentMethodId.value,commit:!0};coinbaseService.buyRequest(accountId,dataSrc,function(err,b){if(err)return ongoingProcess.set("buyingBitcoin",!1,statusChangeHandler),void showError(err);var processBuyTx=function(tx){if(!tx)return ongoingProcess.set("buyingBitcoin",!1,statusChangeHandler),void showError("Transaction not found");coinbaseService.getTransaction(accountId,tx.id,function(err,updatedTx){if(err)return ongoingProcess.set("buyingBitcoin",!1,statusChangeHandler),void showError(err);walletService.getAddress($scope.wallet,!1,function(err,walletAddr){if(err)return ongoingProcess.set("buyingBitcoin",!1,statusChangeHandler),void showError(err);updatedTx.data.toAddr=walletAddr,updatedTx.data.status="pending",$log.debug("Saving transaction to process later..."),coinbaseService.savePendingTransaction(updatedTx.data,{},function(err){ongoingProcess.set("buyingBitcoin",!1,statusChangeHandler),err&&$log.debug(err)})})})},_processBuyOrder=function(){coinbaseService.getBuyOrder(accountId,b.data.id,function(err,buyResp){if(err)return ongoingProcess.set("buyingBitcoin",!1,statusChangeHandler),void showError(err);var tx=buyResp.data?buyResp.data.transaction:null;tx&&tx.id?processBuyTx(tx):$timeout(function(){_processBuyOrder()},5e3)})};$timeout(function(){var tx=b.data?b.data.transaction:null;tx&&tx.id?processBuyTx(tx):_processBuyOrder()},8e3)})}))})},$scope.showWalletSelector=function(){$scope.walletSelectorTitle="Receive in",$scope.showWallets=!0},$scope.onWalletSelect=function(wallet){$scope.wallet=wallet;var parsedAmount=txFormatService.parseAmount("btc",amount,currency);amount=(parsedAmount.amountSat/1e8).toFixed(8),currency="BTC",$scope.amountUnitStr=parsedAmount.amountUnitStr,ongoingProcess.set("calculatingFee",!0),coinbaseService.checkEnoughFundsForFee(amount,function(err){if(ongoingProcess.set("calculatingFee",!1),err)return void showErrorAndBack(err);processPaymentInfo()})},$scope.goBackHome=function(){$scope.sendStatus="",$ionicHistory.nextViewOptions({disableAnimate:!0,historyRoot:!0}),$ionicHistory.clearHistory(),$state.go("tabs.home").then(function(){$state.transitionTo("tabs.buyandsell.coinbase")})}}),angular.module("owsWalletPlugin.controllers").controller("HomeCtrl",function($scope,$timeout,$ionicModal,$ionicHistory,$log,coinbaseService,lodash,popupService,externalLinkService){var isNodeWebKit=owswallet.Plugin.isNodeWebKit(),isCordova=owswallet.Plugin.isCordova();$scope.$on("$ionicView.beforeEnter",function(event,data){$scope.showOauthForm=!1}),$scope.updateTransactions=function(){$log.debug("Getting transactions..."),$scope.pendingTransactions={data:{}},coinbaseService.getPendingTransactions($scope.pendingTransactions)},this.openAuthenticateWindow=function(){var oauthUrl=this.getAuthenticateUrl();if(isNodeWebKit){var self=this;require("nw.gui").Window.open(oauthUrl,{focus:!0,position:"center"},function(new_win){new_win.on("loaded",function(){var title=new_win.window.document.title;$timeout(function(){-1==title.indexOf("Coinbase")&&($scope.code=title,self.submitOauthCode($scope.code),new_win.close())},100)})})}else externalLinkService.open(oauthUrl)},this.openSignupWindow=function(){var url=coinbaseService.getSignupUrl();externalLinkService.open(url,!0,"Sign Up for Coinbase","This will open Coinbase.com, where you can create an account.","Go to Coinbase","Back")},this.openSupportWindow=function(){var url=coinbaseService.getSupportUrl();externalLinkService.open(url,!0,"Coinbase Support","You can email support@coinbase.com for direct support, or you can view their help center.","Open Help Center","Go Back")},this.getAuthenticateUrl=function(){return $scope.showOauthForm=!isCordova&&!isNodeWebKit,coinbaseService.getOauthCodeUrl()},this.toggleOauthForm=function(){$scope.showOauthForm=!$scope.showOauthForm},this.openTxModal=function(tx){$scope.tx=tx,$ionicModal.fromTemplateUrl("views/modals/coinbase-tx-details.html",{scope:$scope,animation:"slide-in-up"}).then(function(modal){$scope.modal=modal,$scope.modal.show()})}}),angular.module("owsWalletPlugin.controllers").controller("TxDetailsCtrl",function($scope,coinbaseService,popupService){$scope.remove=function(){coinbaseService.setCredentials(),$scope.updateRequired=!1;popupService.showConfirm(null,"Are you sure you want to remove this transaction?",null,null,function(ok){ok&&coinbaseService.savePendingTransaction($scope.tx,{remove:!0},function(err){$scope.updateRequired=!0,$scope.close()})})},$scope.close=function(){$scope.modal.hide().then(function(){$scope.updateRequired&&$scope.updateTransactions()})}}),angular.module("owsWalletPlugin.controllers").controller("SellCtrl",function($scope,$log,$state,$timeout,$ionicHistory,$ionicScrollDelegate,$ionicConfig,lodash,coinbaseService,popupService,profileService,ongoingProcess,walletService,appConfigService,configService,txFormatService,externalLinkService){var amount,currency,showErrorAndBack=function(err){$scope.sendStatus="",$log.error(err),err=err.errors?err.errors[0].message:err,popupService.showAlert("Error",err,function(){$ionicHistory.goBack()})},showError=function(err){$scope.sendStatus="",$log.error(err),err=err.errors?err.errors[0].message:err,popupService.showAlert("Error",err)},publishAndSign=function(wallet,txp,onSendStatusChange,cb){if(!wallet.canSign()&&!wallet.isPrivKeyExternal()){var err="No signing proposal: No private key";return $log.info(err),cb(err)}walletService.publishAndSign(wallet,txp,function(err,txp){return err?cb(err):cb(null,txp)},onSendStatusChange)},processPaymentInfo=function(){ongoingProcess.set("connectingCoinbase",!0),coinbaseService.init(function(err,res){if(err)return ongoingProcess.set("connectingCoinbase",!1),void showErrorAndBack(coinbaseService.getErrorsAsString(err.errors));coinbaseService.sellPrice(coinbaseService.getAvailableCurrency(),function(err,s){$scope.sellPrice=s.data||null}),$scope.paymentMethods=[],$scope.selectedPaymentMethodId={value:null},coinbaseService.getPaymentMethods(function(err,p){if(err)return ongoingProcess.set("connectingCoinbase",!1),void showErrorAndBack(coinbaseService.getErrorsAsString(err.errors));for(var hasPrimary,pm,i=0;i<p.data.length;i++)pm=p.data[i],pm.allow_sell&&$scope.paymentMethods.push(pm),pm.allow_sell&&pm.primary_sell&&(hasPrimary=!0,$scope.selectedPaymentMethodId.value=pm.id);if(lodash.isEmpty($scope.paymentMethods)){ongoingProcess.set("connectingCoinbase",!1);return void externalLinkService.open("https://support.coinbase.com/customer/portal/articles/1148716-payment-methods-for-us-customers",!0,null,"No payment method available to sell","More info","Go Back",function(){$ionicHistory.goBack(-2)})}hasPrimary||($scope.selectedPaymentMethodId.value=$scope.paymentMethods[0].id),$scope.sellRequest()})})},checkTransaction=lodash.throttle(function(count,txp){$log.warn("Check if transaction has been received by Coinbase. Try "+count+"/5");var amountBTC=(1e-8*txp.amount).toFixed(8);coinbaseService.init(function(err,res){if(err)return $log.error(err),void checkTransaction(count,txp);var accountId=res.accountId,sellPrice=null;coinbaseService.sellPrice(coinbaseService.getAvailableCurrency(),function(err,sell){if(err)return $log.debug(coinbaseService.getErrorsAsString(err.errors)),void checkTransaction(count,txp);sellPrice=sell.data,coinbaseService.getTransactions(accountId,function(err,ctxs){if(err)return $log.debug(coinbaseService.getErrorsAsString(err.errors)),void checkTransaction(count,txp);for(var ctx,coinbaseTransactions=ctxs.data,txFound=!1,i=0;i<coinbaseTransactions.length;i++)if(ctx=coinbaseTransactions[i],"send"==ctx.type&&ctx.from&&ctx.amount.amount==amountBTC)return $log.warn("Transaction found!",ctx),txFound=!0,$log.debug("Saving transaction to process later..."),ctx.payment_method=$scope.selectedPaymentMethodId.value,ctx.status="pending",ctx.price_sensitivity=$scope.selectedPriceSensitivity.data,ctx.sell_price_amount=sellPrice?sellPrice.amount:"",ctx.sell_price_currency=sellPrice?sellPrice.currency:"USD",ctx.description=appConfigService.nameCase+" Wallet: "+$scope.wallet.name,void coinbaseService.savePendingTransaction(ctx,null,function(err){ongoingProcess.set("sellingBitcoin",!1,statusChangeHandler),err&&$log.debug(coinbaseService.getErrorsAsString(err.errors))});if(!txFound){if($log.warn("Transaction not found in Coinbase. Will try 5 times..."),!(count<5))return ongoingProcess.set("sellingBitcoin",!1,statusChangeHandler),void showError("No transaction found");checkTransaction(count+1,txp)}})})})},8e3,{leading:!0}),statusChangeHandler=function(processName,showName,isOn){$log.debug("statusChangeHandler: ",processName,showName,isOn),"sellingBitcoin"!=processName||isOn?showName&&($scope.sendStatus=showName):($scope.sendStatus="success",$timeout(function(){$scope.$digest()},100))};$scope.$on("$ionicView.beforeLeave",function(event,data){$ionicConfig.views.swipeBackEnabled(!0)}),$scope.$on("$ionicView.enter",function(event,data){$ionicConfig.views.swipeBackEnabled(!1)}),$scope.$on("$ionicView.beforeEnter",function(event,data){if($scope.isFiat="BTC"!=data.stateParams.currency,amount=data.stateParams.amount,currency=data.stateParams.currency,$scope.priceSensitivity=coinbaseService.priceSensitivity,$scope.selectedPriceSensitivity={data:coinbaseService.selectedPriceSensitivity},$scope.network=coinbaseService.getNetwork(),$scope.wallets=profileService.getWallets({m:1,onlyComplete:!0,network:$scope.network,hasFunds:!0,coin:"btc"}),lodash.isEmpty($scope.wallets))return void showErrorAndBack("No wallet available to operate with Coinbase");$scope.onWalletSelect($scope.wallets[0])}),$scope.sellRequest=function(){ongoingProcess.set("connectingCoinbase",!0),coinbaseService.init(function(err,res){if(err)return ongoingProcess.set("connectingCoinbase",!1),void showErrorAndBack(coinbaseService.getErrorsAsString(err.errors));var accountId=res.accountId,dataSrc={amount:amount,currency:currency,payment_method:$scope.selectedPaymentMethodId.value,quote:!0};coinbaseService.sellRequest(accountId,dataSrc,function(err,data){if(ongoingProcess.set("connectingCoinbase",!1),err)return void showErrorAndBack(coinbaseService.getErrorsAsString(err.errors));$scope.sellRequestInfo=data.data,$timeout(function(){$scope.$apply()},100)})})},$scope.sellConfirm=function(){var config=configService.getSync(),configWallet=config.wallet,walletSettings=configWallet.settings,message="Selling bitcoin for "+amount+" "+currency;popupService.showConfirm(null,message,"Confirm","Cancel",function(ok){ok&&(ongoingProcess.set("sellingBitcoin",!0,statusChangeHandler),coinbaseService.init(function(err,res){if(err)return ongoingProcess.set("sellingBitcoin",!1,statusChangeHandler),void showError(coinbaseService.getErrorsAsString(err.errors));var accountId=res.accountId,dataSrc={name:"Received from "+appConfigService.nameCase};coinbaseService.createAddress(accountId,dataSrc,function(err,data){if(err)return ongoingProcess.set("sellingBitcoin",!1,statusChangeHandler),void showError(coinbaseService.getErrorsAsString(err.errors));var outputs=[],toAddress=data.data.address,amountSat=parseInt((1e8*$scope.sellRequestInfo.amount.amount).toFixed(0)),comment="Sell bitcoin (Coinbase)";outputs.push({toAddress:toAddress,amount:amountSat,message:comment});var txp={toAddress:toAddress,amount:amountSat,outputs:outputs,message:comment,payProUrl:null,excludeUnconfirmedUtxos:!configWallet.spendUnconfirmed,feeLevel:walletSettings.feeLevel||"normal"};walletService.createTx($scope.wallet,txp,function(err,ctxp){if(err)return ongoingProcess.set("sellingBitcoin",!1,statusChangeHandler),void showError(err);$log.debug("Transaction created."),publishAndSign($scope.wallet,ctxp,function(){},function(err,txSent){if(err)return ongoingProcess.set("sellingBitcoin",!1,statusChangeHandler),void showError(err);$log.debug("Transaction broadcasted. Wait for Coinbase confirmation..."),checkTransaction(1,txSent)})})})}))})},$scope.showWalletSelector=function(){$scope.walletSelectorTitle="Sell From",$scope.showWallets=!0},$scope.onWalletSelect=function(wallet){$scope.wallet=wallet;var parsedAmount=txFormatService.parseAmount("btc",amount,currency);amount=parsedAmount.amount,currency=parsedAmount.currency,$scope.amountUnitStr=parsedAmount.amountUnitStr,processPaymentInfo()},$scope.goBackHome=function(){$scope.sendStatus="",$ionicHistory.nextViewOptions({disableAnimate:!0,historyRoot:!0}),$ionicHistory.clearHistory(),$state.go("tabs.home").then(function(){$state.transitionTo("tabs.buyandsell.coinbase")})}}),angular.module("owsWalletPlugin.controllers").controller("SettingsCtrl",function($scope,$timeout,$log,$state,$ionicHistory,lodash,ongoingProcess,popupService,coinbaseService){$scope.revokeToken=function(){popupService.showConfirm("Coinbase","Are you sure you would like to log out of your Coinbase account?",null,null,function(res){res&&coinbaseService.logout(function(){$ionicHistory.clearHistory(),$timeout(function(){$state.go("tabs.home")},100)})})},$scope.$on("$ionicView.enter",function(event,data){ongoingProcess.set("connectingCoinbase",!0),coinbaseService.init(function(err,data){if(err||lodash.isEmpty(data)){if(ongoingProcess.set("connectingCoinbase",!1),err){$log.error(err);var errorId=err.errors?err.errors[0].id:null;err=err.errors?err.errors[0].message:err,popupService.showAlert("Error connecting to Coinbase",err,function(){"revoked_token"==errorId&&(coinbaseService.logout(function(){}),$ionicHistory.goBack())})}}else{var accountId=data.accountId;coinbaseService.getAccount(accountId,function(err,account){ongoingProcess.set("connectingCoinbase",!1),$scope.coinbaseAccount=account.data}),coinbaseService.getCurrentUser(function(err,user){$scope.coinbaseUser=user.data})}})})});